----- Otter 3.3f, August 2004 -----
The process was started by root on flare-OptiPlex-3020M,
Sat Dec 31 20:31:14 2016
The command was "otter".  The process ID is 6522.

set(knuth_bendix).
   dependent: set(anl_eq).
   dependent: set(para_from).
   dependent: set(para_into).
   dependent: clear(para_from_right).
   dependent: clear(para_into_right).
   dependent: set(para_from_vars).
   dependent: set(eq_units_both_ways).
   dependent: set(dynamic_demod_all).
   dependent: set(dynamic_demod).
   dependent: set(order_eq).
   dependent: set(back_demod).
   dependent: set(process_input).
   dependent: set(lrpo).

list(usable).
0 [] x=x.
0 [] x+y=y+x.
0 [] x*y=y*x.
0 [] x*y+z=x+y+z.
0 [] (x*y)*z=x*y*z.
0 [] x+x*y=x.
0 [] x* (x+y)=x.
end_of_list.

list(sos).
0 [] x+y*z= (x+y)* (x+z).
0 [] a* (b+c)!=a*b+a*c.
end_of_list.

------------> process usable:
** KEPT (pick-wt=3): 1 [] x=x.
** KEPT (pick-wt=7): 2 [] x+y=y+x.
** KEPT (pick-wt=7): 3 [] x*y=y*x.
** KEPT (pick-wt=11): 4 [] x*y+z=x+y+z.
---> New Demodulator: 5 [new_demod,4] x*y+z=x+y+z.
** KEPT (pick-wt=11): 6 [] (x*y)*z=x*y*z.
---> New Demodulator: 7 [new_demod,6] (x*y)*z=x*y*z.
** KEPT (pick-wt=7): 8 [] x+x*y=x.
---> New Demodulator: 9 [new_demod,8] x+x*y=x.
** KEPT (pick-wt=7): 10 [] x* (x+y)=x.
---> New Demodulator: 11 [new_demod,10] x* (x+y)=x.
  Following clause subsumed by 1 during input processing: 0 [copy,1,flip.1] x=x.
  Following clause subsumed by 2 during input processing: 0 [copy,2,flip.1] x+y=y+x.
  Following clause subsumed by 3 during input processing: 0 [copy,3,flip.1] x*y=y*x.
>>>> Starting back demodulation with 5.
>>>> Starting back demodulation with 7.
>>>> Starting back demodulation with 9.
>>>> Starting back demodulation with 11.

------------> process sos:
** KEPT (pick-wt=13): 12 [] x+y*z= (x+y)* (x+z).
---> New Demodulator: 13 [new_demod,12] x+y*z= (x+y)* (x+z).
** KEPT (pick-wt=17): 15 [copy,14,demod,13,5,5,flip.1] (a+b+a)* (a+b+c)!=a* (b+c).
>>>> Starting back demodulation with 13.
    >> back demodulating 8 with 13.
** KEPT (pick-wt=9): 16 [back_demod,8,demod,13] (x+x)* (x+y)=x.
---> New Demodulator: 17 [new_demod,16] (x+x)* (x+y)=x.
>>>> Starting back demodulation with 17.

======= end of input processing =======

=========== start of search ===========

given clause #1: (wt=9) 16 [back_demod,8,demod,13] (x+x)* (x+y)=x.
** KEPT (pick-wt=21): 18 [para_into,16.1.1.1,4.1.1,demod,13,13,5,7] (x+y+x)* (x+y+y)* (x+y+z)=x*y.
---> New Demodulator: 19 [new_demod,18] (x+y+x)* (x+y+y)* (x+y+z)=x*y.
** KEPT (pick-wt=9): 20 [para_into,16.1.1.2,2.1.1] (x+x)* (y+x)=x.
---> New Demodulator: 21 [new_demod,20] (x+x)* (y+x)=x.
** KEPT (pick-wt=9): 22 [para_into,16.1.1,3.1.1] (x+y)* (x+x)=x.
---> New Demodulator: 23 [new_demod,22] (x+y)* (x+x)=x.
>>>> Starting back demodulation with 19.
>>>> Starting back demodulation with 21.
>>>> Starting back demodulation with 23.
** KEPT (pick-wt=13): 24 [para_from,16.1.1,6.1.1.1,flip.1] (x+x)* (x+y)*z=x*z.
---> New Demodulator: 25 [new_demod,24] (x+x)* (x+y)*z=x*z.
** KEPT (pick-wt=13): 26 [para_from,16.1.1,4.1.1.1,flip.1] (x+x)+ (x+y)+z=x+z.
---> New Demodulator: 27 [new_demod,26] (x+x)+ (x+y)+z=x+z.
>>>> Starting back demodulation with 25.
>>>> Starting back demodulation with 27.

given clause #2: (wt=9) 20 [para_into,16.1.1.2,2.1.1] (x+x)* (y+x)=x.
** KEPT (pick-wt=15): 28 [para_into,20.1.1.1,4.1.1,demod,13,23,13] (x+y)* (z+x)* (z+y)=x*y.
---> New Demodulator: 29 [new_demod,28] (x+y)* (z+x)* (z+y)=x*y.
** KEPT (pick-wt=11): 30 [para_into,20.1.1.2,4.1.1] (x+x)* (y+z+x)=x.
---> New Demodulator: 31 [new_demod,30] (x+x)* (y+z+x)=x.
** KEPT (pick-wt=5): 32 [para_into,20.1.1,10.1.1] x+x=x.
---> New Demodulator: 33 [new_demod,32] x+x=x.
** KEPT (pick-wt=7): 34 [para_into,20.1.1,3.1.1,demod,33] (x+y)*y=y.
---> New Demodulator: 35 [new_demod,34] (x+y)*y=y.
>>>> Starting back demodulation with 29.
>>>> Starting back demodulation with 31.
>>>> Starting back demodulation with 33.
    >> back demodulating 30 with 33.
** KEPT (pick-wt=9): 36 [back_demod,30,demod,33] x* (y+z+x)=x.
---> New Demodulator: 37 [new_demod,36] x* (y+z+x)=x.
    >> back demodulating 26 with 33.
** KEPT (pick-wt=11): 38 [back_demod,26,demod,33] x+ (x+y)+z=x+z.
---> New Demodulator: 39 [new_demod,38] x+ (x+y)+z=x+z.
    >> back demodulating 24 with 33.
** KEPT (pick-wt=11): 40 [back_demod,24,demod,33] x* (x+y)*z=x*z.
---> New Demodulator: 41 [new_demod,40] x* (x+y)*z=x*z.
    >> back demodulating 22 with 33.
** KEPT (pick-wt=7): 42 [back_demod,22,demod,33] (x+y)*x=x.
---> New Demodulator: 43 [new_demod,42] (x+y)*x=x.
    >> back demodulating 20 with 33.
** KEPT (pick-wt=7): 44 [back_demod,20,demod,33] x* (y+x)=x.
---> New Demodulator: 45 [new_demod,44] x* (y+x)=x.
    >> back demodulating 18 with 33.
** KEPT (pick-wt=19): 46 [back_demod,18,demod,33] (x+y+x)* (x+y)* (x+y+z)=x*y.
---> New Demodulator: 47 [new_demod,46] (x+y+x)* (x+y)* (x+y+z)=x*y.
    >> back demodulating 16 with 33.
>>>> Starting back demodulation with 35.
>>>> Starting back demodulation with 37.
>>>> Starting back demodulation with 39.
>>>> Starting back demodulation with 41.
>>>> Starting back demodulation with 43.
>>>> Starting back demodulation with 45.
>>>> Starting back demodulation with 47.

given clause #3: (wt=5) 32 [para_into,20.1.1,10.1.1] x+x=x.
** KEPT (pick-wt=7): 48 [para_into,32.1.1,4.1.1,demod,13,33,43] x+y=x*y.
---> New Demodulator: 49 [new_demod,48] x+y=x*y.
>>>> Starting back demodulation with 49.
    >> back demodulating 46 with 49.
** KEPT (pick-wt=19): 50 [back_demod,46,demod,49,49,49,49,49,7,7,7] x*y*x*x*y*x*y*z=x*y.
---> New Demodulator: 51 [new_demod,50] x*y*x*x*y*x*y*z=x*y.
    >> back demodulating 44 with 49.
** KEPT (pick-wt=7): 52 [back_demod,44,demod,49] x*y*x=x.
---> New Demodulator: 53 [new_demod,52] x*y*x=x.
    >> back demodulating 42 with 49.
    >> back demodulating 40 with 49.
** KEPT (pick-wt=11): 54 [back_demod,40,demod,49,7] x*x*y*z=x*z.
---> New Demodulator: 55 [new_demod,54] x*x*y*z=x*z.
    >> back demodulating 38 with 49.
    >> back demodulating 36 with 49.
** KEPT (pick-wt=9): 56 [back_demod,36,demod,49,49] x*y*z*x=x.
---> New Demodulator: 57 [new_demod,56] x*y*z*x=x.
    >> back demodulating 34 with 49.
** KEPT (pick-wt=7): 58 [back_demod,34,demod,49,7] x*y*y=y.
---> New Demodulator: 59 [new_demod,58] x*y*y=y.
    >> back demodulating 32 with 49.
** KEPT (pick-wt=5): 60 [back_demod,32,demod,49] x*x=x.
---> New Demodulator: 61 [new_demod,60] x*x=x.
    >> back demodulating 28 with 49.
** KEPT (pick-wt=15): 62 [back_demod,28,demod,49,49,49,7,7] x*y*z*x*z*y=x*y.
---> New Demodulator: 63 [new_demod,62] x*y*z*x*z*y=x*y.
    >> back demodulating 15 with 49.
** KEPT (pick-wt=9): 64 [back_demod,15,demod,49,49,53,49,49,55,49,flip.1] a*b*c!=a*c.
    >> back demodulating 12 with 49.
** KEPT (pick-wt=13): 65 [back_demod,12,demod,49,49,49,7,flip.1] x*y*x*z=x*y*z.
---> New Demodulator: 66 [new_demod,65] x*y*x*z=x*y*z.
    >> back demodulating 10 with 49.
** KEPT (pick-wt=7): 67 [back_demod,10,demod,49] x*x*y=x.
---> New Demodulator: 68 [new_demod,67] x*x*y=x.
    >> back demodulating 4 with 49.
    >> back demodulating 2 with 49.
>>>> Starting back demodulation with 51.
>>>> Starting back demodulation with 53.
>>>> Starting back demodulation with 55.
    >> back demodulating 50 with 55.
** KEPT (pick-wt=5): 69 [back_demod,50,demod,66,66,68,53,flip.1] x*y=x.
---> New Demodulator: 70 [new_demod,69] x*y=x.
>>>> Starting back demodulation with 57.
>>>> Starting back demodulation with 59.
>>>> Starting back demodulation with 61.
    >> back demodulating 58 with 61.
** KEPT (pick-wt=3): 71 [back_demod,58,demod,61,70] x=y.

----> UNIT CONFLICT at   0.00 sec ----> 72 [binary,71.1,64.1] $F.

Length of proof is 23.  Level of proof is 8.

---------------- PROOF ----------------

2 [] x+y=y+x.
3 [] x*y=y*x.
5,4 [] x*y+z=x+y+z.
7,6 [] (x*y)*z=x*y*z.
8 [] x+x*y=x.
10 [] x* (x+y)=x.
13,12 [] x+y*z= (x+y)* (x+z).
14 [] a* (b+c)!=a*b+a*c.
15 [copy,14,demod,13,5,5,flip.1] (a+b+a)* (a+b+c)!=a* (b+c).
16 [back_demod,8,demod,13] (x+x)* (x+y)=x.
18 [para_into,16.1.1.1,4.1.1,demod,13,13,5,7] (x+y+x)* (x+y+y)* (x+y+z)=x*y.
20 [para_into,16.1.1.2,2.1.1] (x+x)* (y+x)=x.
22 [para_into,16.1.1,3.1.1] (x+y)* (x+x)=x.
24 [para_from,16.1.1,6.1.1.1,flip.1] (x+x)* (x+y)*z=x*z.
33,32 [para_into,20.1.1,10.1.1] x+x=x.
34 [para_into,20.1.1,3.1.1,demod,33] (x+y)*y=y.
40 [back_demod,24,demod,33] x* (x+y)*z=x*z.
43,42 [back_demod,22,demod,33] (x+y)*x=x.
44 [back_demod,20,demod,33] x* (y+x)=x.
46 [back_demod,18,demod,33] (x+y+x)* (x+y)* (x+y+z)=x*y.
49,48 [para_into,32.1.1,4.1.1,demod,13,33,43] x+y=x*y.
50 [back_demod,46,demod,49,49,49,49,49,7,7,7] x*y*x*x*y*x*y*z=x*y.
53,52 [back_demod,44,demod,49] x*y*x=x.
55,54 [back_demod,40,demod,49,7] x*x*y*z=x*z.
58 [back_demod,34,demod,49,7] x*y*y=y.
61,60 [back_demod,32,demod,49] x*x=x.
64 [back_demod,15,demod,49,49,53,49,49,55,49,flip.1] a*b*c!=a*c.
66,65 [back_demod,12,demod,49,49,49,7,flip.1] x*y*x*z=x*y*z.
68,67 [back_demod,10,demod,49] x*x*y=x.
70,69 [back_demod,50,demod,66,66,68,53,flip.1] x*y=x.
71 [back_demod,58,demod,61,70] x=y.
72 [binary,71.1,64.1] $F.

------------ end of proof -------------


Search stopped by max_proofs option.

============ end of search ============

-------------- statistics -------------
clauses given                  3
clauses generated             21
  para_from generated          4
  para_into generated         17
demod & eval rewrites         87
clauses wt,lit,sk delete       0
tautologies deleted            0
clauses forward subsumed      19
  (subsumed by sos)            0
unit deletions                 0
factor simplifications         0
clauses kept                  38
new demodulators              32
empty clauses                  1
clauses back demodulated      24
clauses back subsumed          0
usable size                    3
sos size                      11
demodulators size             10
passive size                   0
hot size                       0
Kbytes malloced             1953

----------- times (seconds) -----------
user CPU time          0.00          (0 hr, 0 min, 0 sec)
system CPU time        0.00          (0 hr, 0 min, 0 sec)
wall-clock time        0             (0 hr, 0 min, 0 sec)

That finishes the proof of the theorem.

Process 6522 finished Sat Dec 31 20:31:14 2016
