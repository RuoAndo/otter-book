  1: % The problem is
  2: %
  3: %     Loop, Moufang-1 -> Moufang-3
  4: %
  5: % where the proof does not go through Moufang-2.
  6: % The strategy involves the hot list and literal demodulation.
  7: %
  8: % This input file was contributed by Larry Wos (wos@mcs.anl.gov).
  9: 
 10: op(400,xfx, *).  % make all association explicit
 11: 
 12: set(para_into).
 13: set(para_from).
 14: set(order_eq).
 15: set(dynamic_demod).
 16: set(process_input).
 17: 
 18: set(demod_out_in).
 19: set(lrpo).
 20: lex([$T,A,B,C,D,E,1,_*_,rs(_,_),ls(_,_),=(_,_)]).
 21: 
 22: assign(max_weight,20).
 23: assign(pick_given_ratio,3).
 24: 
 25: assign(max_proofs,2).
 26: assign(max_mem,20000).
 27: 
 28: clear(print_kept).
 29: clear(print_new_demod).
 30: 
 31: list(usable).
 32: x = x.
 33: x * rs(x,y) = y.   % right solvable
 34: rs(x,x * y) = y.   % right solution is unique (implies left cancellation)
 35: ls(x,y) * y = x.   % left solvable
 36: ls(x * y,y) = x.   % left solution is unique (implies right cancellation)
 37: 
 38: 1 * x = x.
 39: x * 1 = x.
 40: 
 41: end_of_list.
 42: 
 43: list(sos).
 44: (x * y) * (z * x)  = (x * (y * z)) * x.  % Moufang_1
 45: A * (B * (A * C))  !=  ((A * B) * A) * C | $ANS(Moufang_3).
 46: end_of_list.
 47: 
 48: list(demodulators).
 49: %  Blocking use of Moufang 2.
 50: EQ(( ((x * y) * z) * y = x * (y * (z * y)) ), $T).
 51: EQ(( x * (y * (z * y)) = ((x * y) * z) * y ), $T).
 52: end_of_list.
 53: 
 54: list(hot).
 55: (x * y) * (z * x)  = (x * (y * z)) * x.  % Moufang_1
 56: 
 57: x * rs(x,y) = y.   % right solvable
 58: rs(x,x * y) = y.   % right solution is unique (implies left cancellation)
 59: ls(x,y) * y = x.   % left solvable
 60: ls(x * y,y) = x.   % left solution is unique (implies right cancellation)
 61: 
 62: 1 * x = x.
 63: x * 1 = x.
 64: end_of_list.
